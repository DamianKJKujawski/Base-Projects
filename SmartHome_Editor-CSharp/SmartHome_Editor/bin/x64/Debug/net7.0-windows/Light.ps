//////////////////////
////   GLOBALS
//////////////////////
Texture2D shaderTexture;
SamplerState SampleType;

cbuffer LightBuffer
{
    float4 diffuseColor;
    float3 lightDirection;
    float padding;
};

//////////////////////
////   TYPES
//////////////////////
struct PixelInputType
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    float3 normal : NORMAL;
};

//////////////////////
////   Pixel Shader
/////////////////////
float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
    float4 textureColor;
    float3 lightDir;
    float lightIntensity;
    float4 color;

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    textureColor = shaderTexture.Sample(SampleType, input.tex);

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

    // Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));

    // Determine the final diffuse color based on the diffuse color combined with the light intensity.
    color.rgb = saturate(diffuseColor.rgb * lightIntensity);

    // Multiply the texture pixel and the final diffuse color to get the final pixel color result.
    color.rgb *= textureColor.rgb;

    // Set the alpha channel from the texture's alpha channel.
    color.a = textureColor.a;

    // Discard pixels with an alpha value greater than 0.5
    if (color.a == 0)
        discard;

    return color;
}